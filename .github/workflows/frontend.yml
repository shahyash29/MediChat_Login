name: Frontend CI/CD

on:
  push:
    branches: [main]
  pull_request:   # optionalâ€”but handy for PR checks
    branches: [main]

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    env:
      REACT_APP_API_URL: http://localhost:5001
      FRONTEND_URL:      http://localhost:3000
      IMAGE_NAME:        ${{ secrets.DOCKER_USERNAME }}/frontend-chatbot

    steps:
    # ---- Checkout repo ----
    - uses: actions/checkout@v3

    # ---- Node + dependency cache ----
    - uses: actions/setup-node@v3
      with:
        node-version: 18

    # ---- Install & start backend ----
    - name: Install & start Backend
      working-directory: backend
      run: |
        npm ci
        npm start 2>&1 | tee /tmp/backend.log &                        # start background server
        npx wait-on http://localhost:5001/api/health



    # ---- Build frontend (production bundle) ----
    - name: Build Frontend
      working-directory: medi-chat-frontend
      run: |
        npm ci
        npm run build

    # ---- Serve bundle for E2E ----
    - name: Serve Frontend
      working-directory: medi-chat-frontend
      run: |
        npm install -g serve
        serve -s build -l 3000 &          # SPA served at :3000
        npx wait-on http://localhost:3000 --timeout 60000

    # ---- Launch Selenium (stand-alone Chrome) ----
    - name: Start Selenium server
      run: |
        docker run -d \
          --name selenium \
          --network host \
          --shm-size=2g \
          seleniarm/standalone-chromium:latest
        npx wait-on http://localhost:4444/wd/hub/status

    # ---- Run E2E tests (unchanged test file) ----
    - name: Run Selenium E2E tests
      working-directory: medi-chat-frontend
      run: npm run test:e2e

    - name: Dump backend log on failure
      if: failure()                                 # runs only if a later step fails
      run: |
        echo "---- BACKEND LOG ----"
        cat backend.log || true

    # ---- Build & push Docker image ----
    - name: Docker login & push
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | \
          docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker buildx create --use
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --build-arg REACT_APP_API_URL=$REACT_APP_API_URL \
          -f Dockerfile \
          -t $IMAGE_NAME:${{ github.sha }} \
          -t $IMAGE_NAME:latest \
          --push .
